package uet.barrydevp.towerdefense.Tower;import javafx.geometry.Point2D;import uet.barrydevp.towerdefense.BaseEntity;import uet.barrydevp.towerdefense.Bullet.BaseBullet;import uet.barrydevp.towerdefense.Game.GameManager;import uet.barrydevp.towerdefense.Monster.BaseMonster;import uet.barrydevp.towerdefense.Sprite.BaseSprite;import uet.barrydevp.towerdefense.Sprite.RootTower;import java.util.ArrayList;public abstract class BaseTower extends BaseEntity {    private TowerName towerName;//    private BaseSprite baseSprite;    private int level;    private double scope;    private double nextScope;    private double rate;    private double elapsedShoot;    private int force;    private int updateMoney;    private int buildMoney;    private BaseMonster nearestMonster;    public BaseTower() {        baseSprite = null;        elapsedShoot = 0;        level = 0;        scope = 0;        nextScope = 0;        rate = 0;        force = 0;        updateMoney = 0;        buildMoney = 0;        nearestMonster = null;        layer = GameManager.getInstance().getTowerLayer();    }    public abstract boolean init();    public void setTowerName(TowerName towerName) {        this.towerName = towerName;    }    public TowerName getTowerName() {        return towerName;    }    public BaseSprite getBaseSprite() {        return baseSprite;    }    public void setBaseSprite(BaseSprite baseSprite) {        this.baseSprite = baseSprite;    }    public int getLevel() {        return level;    }    public void setLevel(int level) {        this.level = level;    }    public BaseMonster getNearestMonster() {        return nearestMonster;    }    public void setNearestMonster(BaseMonster nearestMonster) {        this.nearestMonster = nearestMonster;    }    public double getScope() {        return scope;    }    public void setScope(double scope) {        this.scope = scope;    }    public int getForce() {        return force;    }    public void setForce(int force) {        this.force = force;    }    public int getBuildMoney() {        return buildMoney;    }    public void setBuildMoney(int buildMoney) {        this.buildMoney = buildMoney;    }    public double getNextScope() {        return nextScope;    }    public void setNextScope(double nextScope) {        this.nextScope = nextScope;    }    public double getRate() {        return rate;    }    public void setRate(double rate) {        this.rate = rate;    }    public double getElapsedShoot() {        return elapsedShoot;    }    public void setElapsedShoot(double elapsedShoot) {        this.elapsedShoot = elapsedShoot;    }    public int getUpdateMoney() {        return updateMoney;    }    public void setUpdateMoney(int updateMoney) {        this.updateMoney = updateMoney;    }    public abstract void upgradeTower();    public void sellTower() {        removeTower();    }    public void removeTower() {        GameManager instance = GameManager.getInstance();        instance.getTowerArray().remove(this);        removeFromLayer();        layer.getChildren().add(new RootTower(baseSprite.getCenterLocation()));    }    public void checkNearestMonster() {        GameManager instance = GameManager.getInstance();        ArrayList<BaseMonster> monsterArray = instance.getMonsterArray();        double curMinDistance = scope; // to get the nearest monster        BaseMonster tmpMonster = null;        for(int i = 0; i < monsterArray.size(); ++i) {            BaseMonster monster = monsterArray.get(i);            double distance = monster.getBaseSprite().getCenterLocation().distance(baseSprite.getCenterLocation());            if(distance < curMinDistance) {                curMinDistance = distance;                tmpMonster = monster;            }        }        nearestMonster = tmpMonster;    }    public void shoot(double dt) {        GameManager instance = GameManager.getInstance();        if(baseSprite.getChildren() != null && baseSprite.getChildren().get(0).isVisible() && elapsedShoot > 0.3) {            baseSprite.setVisibleChild(0, false);        }        if(elapsedShoot > rate){            checkNearestMonster();            if(nearestMonster != null && nearestMonster.getCurHp() > 0) {                baseSprite.setVisibleChild(0, true);                Point2D vectorShoot = nearestMonster.getBaseSprite().getCenterLocation().subtract(baseSprite.getCenterLocation());                double alpha = Math.atan2(vectorShoot.getY(), vectorShoot.getX());                baseSprite.update(getBaseSprite().getCenterLocation(), Math.toDegrees(alpha));                double dx = 32 * Math.cos(alpha);                double dy = 32 * Math.sin(alpha);                createBullet(nearestMonster, getBaseSprite().getCenterLocation().add(new Point2D(dx, dy)));            }            elapsedShoot = 0;        } else {            elapsedShoot += dt;        }    }    public void update(double dt) {        shoot(dt);    }    public abstract void createBullet(BaseMonster targetMonster, Point2D center);}