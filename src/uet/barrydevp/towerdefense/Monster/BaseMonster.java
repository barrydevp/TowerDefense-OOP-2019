package uet.barrydevp.towerdefense.Monster;import javafx.scene.Group;import uet.barrydevp.towerdefense.Game.GameManager;import uet.barrydevp.towerdefense.HealthBar;import uet.barrydevp.towerdefense.Sprite;import javafx.geometry.Point2D;import java.util.ArrayList;public abstract class BaseMonster {    /**     * Property     */    // public    private Group groupPaneMonster;    private Sprite baseSprite;    private HealthBar hpBar;    private ArrayList<Point2D> pointsArray;    private boolean isAttackByTower;    private boolean isAttacking;    private double runSpeed;    private int maxHp;    private int curHp;    private int force;    private int armor;    private double hpPercentage;    private int money;    // protected    protected  int pointCounter;    protected  boolean isSlowed;    protected MonsterState monsterState;    protected  MonsterState lastState;    protected MonsterName monsterName;    /**     * Constructor     */    public BaseMonster() {        groupPaneMonster = null;        baseSprite = null;        pointCounter = 0;        runSpeed = 0;        maxHp = 0;        curHp = 0;        armor = 0;        hpPercentage = 1;        hpBar = null;        lastState = null;        isAttackByTower = true;        isAttacking = false;        isSlowed = false;        money = 0;    }    public abstract boolean init();    public void setMonsterName(MonsterName monsterName) {        this.monsterName = monsterName;    }    public MonsterName getMonsterName() {        return monsterName;    }    public void setMonsterState(MonsterState monsterState) {        this.monsterState = monsterState;    }    public MonsterState getMonsterState() {        return monsterState;    }    public Group getGroupPaneMonster() {        return groupPaneMonster;    }    public void createAndSetGroupPaneMonster(Group groupPaneMonster) {        this.groupPaneMonster = groupPaneMonster;        groupPaneMonster.getChildren().add(hpBar);        GameManager.getInstance().getMonsterAndTowerLayer().getChildren().add(groupPaneMonster);    }    public Sprite getBaseSprite() {        return baseSprite;    }    public void setBaseSprite(Sprite baseSprite) {        this.baseSprite = baseSprite;    }    public ArrayList<Point2D> getPointsArray() {        return pointsArray;    }    public void setPointsArray(ArrayList<Point2D> pointsArray) {        this.pointsArray = pointsArray;    }    public int getArmor() {        return armor;    }    public void setArmor(int armor) {        this.armor = armor;    }    public int getCurHp() {        return curHp;    }    public void setCurHp(int curHp) {        this.curHp = curHp;    }    public int getMaxHp() {        return maxHp;    }    public void setMaxHp(int maxHp) {        this.maxHp = maxHp;    }    public int getForce() {        return force;    }    public void setForce(int force) {        this.force = force;    }    public int getMoney() {        return money;    }    public void setMoney(int money) {        this.money = money;    }    public double getRunSpeed() {        return runSpeed;    }    public void setRunSpeed(double runSpeed) {        this.runSpeed = runSpeed;    }    public double getHpPercentage() {        return hpPercentage;    }    public void setHpPercentage(double hpPercentage) {        this.hpPercentage = hpPercentage;    }    public boolean isAttackByTower() {        return isAttackByTower;    }    public void setAttackByTower(boolean attackByTower) {        isAttackByTower = attackByTower;    }    public boolean isAttacking() {        return isAttacking;    }    public void setAttacking(boolean attacking) {        isAttacking = attacking;    }    public boolean isSlowed() {        return isSlowed;    }    public void setSlowed(boolean slowed) {        isSlowed = slowed;    }    /**     * method     */    // public    public void getHurt(){        // doi mau khi bi ban trung    }    public void death(){    }    public void explosion(){    }    public void stopWalking(){    }    public void restartWalking(){    }    public void slowRunSpeed(double dt, double dis){    }    public Point2D getNextPoint(){        int maxCount = pointsArray.size();        if(++pointCounter < maxCount) {            return pointsArray.get(pointCounter--);        }        --pointCounter;//        System.out.println("nextpointCounter: " + pointCounter);        return curPoint();    }    public void frozen(){    }    public void refrozen(double dt){    }    // protected    protected void setMonsterZorder(int yOrder){    }    protected Point2D curPoint(){        return pointsArray.get(pointCounter);    }    protected Point2D getCurPoint(){//        System.out.println("curpointCounter: " + pointCounter);        return pointsArray.get(pointCounter);    }//    protected Point2D nextPoint(){//        int maxCount = pointsArray.size();//        if(++pointCounter < maxCount) {//            return pointsArray.get(pointCounter);//        }//        --pointCounter;////        return curPoint();//    }    protected void nextPoint(){        int maxCount = pointsArray.size();        if(++pointCounter > maxCount) {            --pointCounter;        }    }    protected void runNextPoint(double elapsedTime){//        System.out.println(elapsedTime);        Point2D tempCurPoint = getCurPoint();//        baseSprite.setPosition(tempCurPoint);        Point2D tempNextPoint = getNextPoint();//        setMonsterZorder();        if(tempNextPoint.getY() > tempCurPoint.getY())        {            monsterState = MonsterState.stateWalkUp;        }else if(tempNextPoint.getY() <= tempCurPoint.getY())        {            monsterState = MonsterState.stateWalkDown;        }else if(tempNextPoint.getX() >= tempCurPoint.getX())        {            monsterState = MonsterState.stateWalkRight;        }        else if(tempNextPoint.getX() < tempCurPoint.getX())        {            monsterState = MonsterState.stateWalkLeft;        }        // monster move        if(tempNextPoint != tempCurPoint ){//            System.out.println("pointCounter: " + pointCounter);            Point2D centerLocation = baseSprite.getCenterLocation();            double ds = tempNextPoint.distance(centerLocation);//            System.out.println("ds:" + ds);//            System.out.println("v * time:" + runSpeed * elapsedTime);//            System.out.println(runSpeed * elapsedTime > ds);            if((runSpeed * elapsedTime) > ds) {                nextPoint();            }            Point2D vectorVelocity = tempNextPoint.subtract(centerLocation);            double alpha = Math.atan2(vectorVelocity.getY(), vectorVelocity.getX());            double velocityX = runSpeed * Math.cos(alpha);            double velocityY = runSpeed * Math.sin(alpha);            double dx = velocityX * elapsedTime;            double dy = velocityY * elapsedTime;            Point2D vectorDS = new Point2D(dx, dy);//            baseSprite.setCenterLocation(centerLocation.add(vectorDS));//            baseSprite.setR(Math.toDegrees(alpha));//            baseSprite.updateUI();            baseSprite.update(centerLocation.add(vectorDS), Math.toDegrees(alpha));        } else{            GameManager.getInstance().setLife(GameManager.getInstance().getLife() - 1);            removeMonster();        }    }    public void removeMonster() {        GameManager instance = GameManager.getInstance();        instance.removeMonster(this);        instance.getMonsterAndTowerLayer().getChildren().remove(hpBar);//        groupPaneMonster.getChildren().remove(hpBar);        curHp = 0;        baseSprite.removeSprite();    }    public HealthBar getHpBar() {        return hpBar;    }    public void setHpBar(HealthBar hpBar) {        this.hpBar = hpBar;        if(hpBar != null) {            GameManager.getInstance().getMonsterAndTowerLayer().getChildren().add(hpBar);        }    }    //    protected boolean onTouchBegan();//    protected void onTouchEnded();    public void update(double dt){        if(curHp > 0) {            runNextPoint(dt);            hpBar.update(hpPercentage);        } else {            removeMonster();        }    }    protected void stopMonsterAnimation(){    }    protected void showInfo(){    }    protected void setListener(){    }}