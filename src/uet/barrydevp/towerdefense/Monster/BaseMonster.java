package uet.barrydevp.towerdefense.Monster;import javafx.scene.effect.ColorAdjust;import uet.barrydevp.towerdefense.BaseEntity;import uet.barrydevp.towerdefense.Game.GameManager;import uet.barrydevp.towerdefense.HealthBar;import javafx.geometry.Point2D;import java.util.ArrayList;public abstract class BaseMonster extends BaseEntity {    public static final String EXPLOSION_EFFECT = "EXPLOSION_EFFECT";    public static final double SLOW_TIME = 1;    public static final double POISON_TIME = 3;    public static final double WEAK_TIME = 5;    /**     * Property     */    // public    private HealthBar hpBar;    private ArrayList<Point2D> pointsArray;    private boolean isAttackByTower;    private boolean isAttacking;    private double runSpeed;    private double dSpeed;    private double maxHp;    private double curHp;    private double dCurHp;    private double force;    private double armor;    private double dArmor;    private double hpPercentage;    private int money;    private boolean isDeath;    private double elapsedDeath;    private double elapsedSlowEffect;    private double elapsedPoisonEffect;    private double elapsedWeakEffect; // time get subtract armor    // protected    protected  int pointCounter;    protected  boolean isSlowed;    protected  boolean isPoised;    protected  boolean isWeak;    protected MonsterState monsterState;    protected  MonsterState lastState;    protected MonsterName monsterName;    /**     * Constructor     */    public BaseMonster() {        pointCounter = 0;        runSpeed = 0;        maxHp = 0;        curHp = 0;        armor = 0;        hpPercentage = 1;        hpBar = null;        lastState = null;        isAttackByTower = true;        isAttacking = false;        isSlowed = false;        isPoised = false;        isWeak = false;        isDeath = false;        elapsedDeath = 0;        elapsedSlowEffect = 0;        money = 0;        layer = GameManager.getInstance().getMonsterLayer();    }    public abstract boolean init();    public void setMonsterName(MonsterName monsterName) {        this.monsterName = monsterName;    }    public MonsterName getMonsterName() {        return monsterName;    }    public void setMonsterState(MonsterState monsterState) {        this.monsterState = monsterState;    }    public MonsterState getMonsterState() {        return monsterState;    }    public ArrayList<Point2D> getPointsArray() {        return pointsArray;    }    public void setPointsArray(ArrayList<Point2D> pointsArray) {        this.pointsArray = pointsArray;    }    public boolean isDeath() {        return isDeath;    }    public void setDeath(boolean death) {        isDeath = death;    }    public double getArmor() {        return armor + dArmor;    }    public void setArmor(double armor) {        this.armor = armor;    }    public double getCurHp() {        return curHp;    }    public void setCurHp(double curHp) {        this.curHp = curHp;        setHpPercentage(curHp * 1.0 / getMaxHp());    }    public double getMaxHp() {        return maxHp;    }    public void setMaxHp(double maxHp) {        this.maxHp = maxHp;    }    public double getForce() {        return force;    }    public void setForce(double force) {        this.force = force;    }    public int getMoney() {        return money;    }    public void setMoney(int money) {        this.money = money;    }    public double getRunSpeed() {        return runSpeed;    }    public void setRunSpeed(double runSpeed) {        this.runSpeed = runSpeed;    }    public double getHpPercentage() {        return hpPercentage;    }    public void setHpPercentage(double hpPercentage) {        this.hpPercentage = hpPercentage;    }    public boolean isAttackByTower() {        return isAttackByTower;    }    public void setAttackByTower(boolean attackByTower) {        isAttackByTower = attackByTower;    }    public boolean isAttacking() {        return isAttacking;    }    public void setAttacking(boolean attacking) {        isAttacking = attacking;    }    public boolean isSlowed() {        return isSlowed;    }    public void setSlowed(boolean slowed) {        isSlowed = slowed;    }    /**     * method     */    // public    public void getHurt(){        // doi mau khi bi ban trung    }    public void death(){        GameManager instance = GameManager.getInstance();        int tmpMoney = instance.getMoney() + money;        instance.setMoney(tmpMoney);        isDeath = true;        explosion();    }    public void explosion(){//        if(baseSprite.getChildrenSprite() != null && baseSprite.getChildrenSprite().get(EXPLOSION_EFFECT) != null) {//            System.out.println("alo");            getBaseSprite().setVisibleChild(EXPLOSION_EFFECT, true);//        }        getBaseSprite().setVisible(false);        hpBar.setVisible(false);    }    public void stopWalking(){    }    public void restartWalking(){    }    public void slowRunSpeed(double dt, double dis){    }    public Point2D getNextPoint(){        int maxCount = pointsArray.size();        if(++pointCounter < maxCount) {            return pointsArray.get(pointCounter--);        }        --pointCounter;//        System.out.println("nextpointCounter: " + pointCounter);        return curPoint();    }    public void frozen(double slowSpeed){        elapsedSlowEffect = 0;        dSpeed = -slowSpeed;        isSlowed = true;        ColorAdjust colorAdjust = new ColorAdjust();        colorAdjust.setContrast(0.0);        colorAdjust.setHue(0.5);        baseSprite.setEffect(colorAdjust);    }    public void refrozen(double dt){        if(elapsedSlowEffect > SLOW_TIME) {            elapsedSlowEffect = 0;            isSlowed = false;            dSpeed = 0;            baseSprite.setEffect(null);        } else {            elapsedSlowEffect += dt;        }    }    public void poison(int damePoison){        elapsedPoisonEffect = 0;        dCurHp = -damePoison;        isPoised = true;        ColorAdjust colorAdjust = new ColorAdjust();        colorAdjust.setContrast(0.0);        colorAdjust.setHue(2.0);        baseSprite.setEffect(colorAdjust);    }    public void rePoison(double dt){        if(elapsedPoisonEffect > POISON_TIME) {            elapsedPoisonEffect = 0;            isPoised = false;            dCurHp = 0;            baseSprite.setEffect(null);        } else {//            System.out.println("dhp" + (int)Math.round(dCurHp * dt / POISON_TIME));//            System.out.println("curHp" + (getCurHp() + (int)Math.round(dCurHp * dt / 0.5)));//            int dHp = (int)Math.round(dCurHp * dt / POISON_TIME) == 0 ? 1 : (int)Math.round(dCurHp * dt / POISON_TIME);//            int monsterHp = getCurHp() + (int)Math.round(dCurHp * dt / POISON_TIME);            double monsterHp = getCurHp() + dCurHp * dt / POISON_TIME;            if(Double.compare( monsterHp, 0) <= 0){                setCurHp(0);                death();            } else {                setCurHp(monsterHp);            }            elapsedPoisonEffect += dt;        }    }    public void weak(int armor){        elapsedWeakEffect = 0;        dArmor = -armor;        isWeak = true;        ColorAdjust colorAdjust = new ColorAdjust();        colorAdjust.setContrast(0.0);        colorAdjust.setHue(1.2);        baseSprite.setEffect(colorAdjust);    }    public void reWeak(double dt){        if(elapsedWeakEffect > WEAK_TIME) {            elapsedWeakEffect = 0;            isWeak = false;            dArmor = 0;            baseSprite.setEffect(null);        } else {            elapsedSlowEffect += dt;        }    }    // protected    protected void setMonsterZorder(int yOrder){    }    protected Point2D curPoint(){        return pointsArray.get(pointCounter);    }    protected Point2D getCurPoint(){//        System.out.println("curpointCounter: " + pointCounter);        return pointsArray.get(pointCounter);    }//    protected Point2D nextPoint(){//        int maxCount = pointsArray.size();//        if(++pointCounter < maxCount) {//            return pointsArray.get(pointCounter);//        }//        --pointCounter;////        return curPoint();//    }    protected void nextPoint(){        int maxCount = pointsArray.size();        if(++pointCounter > maxCount) {            --pointCounter;        }    }    protected void runNextPoint(double elapsedTime){//        System.out.println(elapsedTime);        Point2D tempCurPoint = getCurPoint();//        baseSprite.setPosition(tempCurPoint);        Point2D tempNextPoint = getNextPoint();//        setMonsterZorder();        if(tempNextPoint.getY() > tempCurPoint.getY())        {            monsterState = MonsterState.stateWalkUp;        }else if(tempNextPoint.getY() <= tempCurPoint.getY())        {            monsterState = MonsterState.stateWalkDown;        }else if(tempNextPoint.getX() >= tempCurPoint.getX())        {            monsterState = MonsterState.stateWalkRight;        }        else if(tempNextPoint.getX() < tempCurPoint.getX())        {            monsterState = MonsterState.stateWalkLeft;        }        // monster move        if(tempNextPoint != tempCurPoint ){//            System.out.println("pointCounter: " + pointCounter);            Point2D centerLocation = baseSprite.getCenterLocation();            double ds = tempNextPoint.distance(centerLocation);//            System.out.println("ds:" + ds);//            System.out.println("v * time:" + runSpeed * elapsedTime);//            System.out.println(runSpeed * elapsedTime > ds);            double tmpSpeed = (runSpeed + dSpeed) > 0 ? (runSpeed + dSpeed) : 0;            if((tmpSpeed * elapsedTime) > ds) {                nextPoint();            }            Point2D vectorVelocity = tempNextPoint.subtract(centerLocation);            double alpha = Math.atan2(vectorVelocity.getY(), vectorVelocity.getX());            double velocityX = tmpSpeed * Math.cos(alpha);            double velocityY = tmpSpeed * Math.sin(alpha);            double dx = velocityX * elapsedTime;            double dy = velocityY * elapsedTime;            Point2D vectorDS = new Point2D(dx, dy);//            baseSprite.setCenterLocation(centerLocation.add(vectorDS));//            baseSprite.setR(Math.toDegrees(alpha));//            baseSprite.updateUI();            baseSprite.update(centerLocation.add(vectorDS), Math.toDegrees(alpha));            if(baseSprite.getChildrenSprite() != null && baseSprite.getChildrenSprite().get(EXPLOSION_EFFECT) != null) {                baseSprite.getChildrenSprite().get(EXPLOSION_EFFECT).update(centerLocation.add(vectorDS), Math.toDegrees(alpha));            }        } else{            int tmpLife = GameManager.getInstance().getLife() - 1;            GameManager.getInstance().setLife(tmpLife);//            if(tmpLife <= 0) {////            }            removeMonster();        }    }    public void removeMonster() {        explosion();        GameManager instance = GameManager.getInstance();        instance.removeMonster(this);        instance.getMonsterLayer().getChildren().remove(hpBar);        curHp = 0;        removeFromLayer();    }    public HealthBar getHpBar() {        return hpBar;    }    public void setHpBar(HealthBar hpBar) {        this.hpBar = hpBar;        if(hpBar != null) {            GameManager.getInstance().getMonsterLayer().getChildren().add(hpBar);        }    }    //    protected boolean onTouchBegan();//    protected void onTouchEnded();    public void activeEffect(double dt) {        if(isSlowed) {            refrozen(dt);        }        if(isWeak) {            reWeak(dt);        }        if(isPoised) {            rePoison(dt);        }    }    public void update(double dt){        if(Double.compare( curHp, 0) > 0) {            activeEffect(dt);            runNextPoint(dt);            hpBar.update(hpPercentage);        } else {            if(isDeath) {                if(elapsedDeath > 0.5) {                    removeMonster();                } else {                    elapsedDeath += dt;                }            } else {                removeMonster();            }        }    }    protected void stopMonsterAnimation(){    }    protected void showInfo(){    }    protected void setListener(){    }}