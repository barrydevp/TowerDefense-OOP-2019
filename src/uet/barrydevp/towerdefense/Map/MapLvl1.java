package uet.barrydevp.towerdefense.Map;import javafx.geometry.Point2D;import uet.barrydevp.towerdefense.Game.GameManager;import uet.barrydevp.towerdefense.Entity.Monster.MonsterName;import java.util.ArrayList;public class MapLvl1 extends BaseMap {    public static MapLvl1 createMap() {        MapLvl1 map = new MapLvl1();        map.setLevel(1);        map.setMaxWave(5);        map.setDifficulty(1);        map.addPointsArray();        map.addWave();        map.addlocationRoot();        map.addTile();        GameManager instance = GameManager.getInstance();        instance.setLife(0);        instance.setLevel(1);        instance.setMoney(500);        return map;    }    @Override    public void addPointsArray() {        ArrayList<Point2D> pointsArray = new ArrayList<>();        pointsArray.add(new Point2D(0.0, 100.0));        pointsArray.add(new Point2D(400.0, 200.0));        pointsArray.add(new Point2D(800.0, 100.0));        pointsArray.add(new Point2D(1000.0, 300.0));        pointsArray.add(new Point2D(1000.0, 500.0));        pointsArray.add(new Point2D(800.0, 500.0));        pointsArray.add(new Point2D(0.0, 600.0));        this.pointsArray = pointsArray;    }    @Override    public void addWave() {        int maxWave = 5;//        int[] turn = new int[maxWave];//        turn[0] = 4;//        turn[1] = 4;//        for(int i = 0; i < maxWave; ++i) {//            this.waveArray.add(new ArrayList<>());////            this.waveArray.get(i).add(MonsterName.GreenMinion);//            this.waveArray.get(i).add(MonsterName.GreenMinion);//            this.waveArray.get(i).add(MonsterName.GreenMinion);//            this.waveArray.get(i).add(MonsterName.GreenMinion);//            this.waveArray.get(i).add(MonsterName.GreenMinion);////        }        this.waveArray.add(new ArrayList<>());        this.waveArray.get(0).add(MonsterName.GreenMinion);        this.waveArray.get(0).add(MonsterName.GreenMinion);        this.waveArray.get(0).add(MonsterName.GreenMinion);        this.waveArray.get(0).add(MonsterName.GreenMinion);        this.waveArray.get(0).add(MonsterName.GreenMinion);        this.waveArray.add(new ArrayList<>());        this.waveArray.get(1).add(MonsterName.RedMinion);        this.waveArray.get(1).add(MonsterName.RedMinion);        this.waveArray.get(1).add(MonsterName.RedMinion);        this.waveArray.get(1).add(MonsterName.RedMinion);        this.waveArray.get(1).add(MonsterName.RedMinion);        this.waveArray.add(new ArrayList<>());        this.waveArray.get(2).add(MonsterName.BrowMinion);        this.waveArray.get(2).add(MonsterName.BrowMinion);        this.waveArray.get(2).add(MonsterName.BrowMinion);        this.waveArray.get(2).add(MonsterName.BrowMinion);        this.waveArray.get(2).add(MonsterName.BrowMinion);        this.waveArray.add(new ArrayList<>());        this.waveArray.get(3).add(MonsterName.SilverMinion);        this.waveArray.get(3).add(MonsterName.SilverMinion);        this.waveArray.get(3).add(MonsterName.SilverMinion);        this.waveArray.get(3).add(MonsterName.SilverMinion);        this.waveArray.get(3).add(MonsterName.SilverMinion);        this.waveArray.add(new ArrayList<>());        this.waveArray.get(4).add(MonsterName.GreenPlane);    }    @Override    public void addlocationRoot() {        locationRootArray.add(new Point2D(50.0, 200.0));        locationRootArray.add(new Point2D(350.0, 300.0));        locationRootArray.add(new Point2D(750.0, 200.0));        locationRootArray.add(new Point2D(920.0, 400.0));        locationRootArray.add(new Point2D(920.0, 600.0));        locationRootArray.add(new Point2D(720.0, 600.0));        locationRootArray.add(new Point2D(400.0, 600.0));        locationRootArray.add(new Point2D(30.0, 500.0));    }}