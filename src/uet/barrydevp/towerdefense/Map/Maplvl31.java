package uet.barrydevp.towerdefense.Map;import javafx.geometry.Point2D;import javafx.scene.image.ImageView;import uet.barrydevp.towerdefense.Game.GameManager;import uet.barrydevp.towerdefense.Game.GameSpriteManager;import uet.barrydevp.towerdefense.Entity.Monster.MonsterName;import java.util.ArrayList;public class Maplvl31 extends BaseMap {    public static Maplvl31 createMap() {        Maplvl31 map = new Maplvl31();        map.setMapSprite(new ImageView(GameSpriteManager.getInstance().Maplvl3Image));        map.addToLayer();        map.setLevel(2);        map.setMaxWave(10);        map.setDifficulty(1);        map.addPointsArray();        map.addWave();        map.addlocationRoot();        map.addTile();        GameManager instance = GameManager.getInstance();        instance.setLife(10);        instance.setLevel(2);        instance.setMoney(500);        return map;    }    @Override    public void addPointsArray() {        ArrayList<Point2D> pointsArray = new ArrayList<>();//        pointsArray.add(new Point2D(1028, 60));//        pointsArray.add(new Point2D(765, 60));//        pointsArray.add(new Point2D(765, 220));//        pointsArray.add(new Point2D(550, 220));//        pointsArray.add(new Point2D(555, 60));//        pointsArray.add(new Point2D(100, 60));//        pointsArray.add(new Point2D(100, 350));//        pointsArray.add(new Point2D(905, 350));//        pointsArray.add(new Point2D(905, 630));//        pointsArray.add(new Point2D(765, 480));//        pointsArray.add(new Point2D(560, 480));//        pointsArray.add(new Point2D(560, 630));//        pointsArray.add(new Point2D(0, 630));        pointsArray.add(new Point2D(1025.0, 60.0));        pointsArray.add(new Point2D(765.0, 60.0));        pointsArray.add(new Point2D(765.0, 220.0));        pointsArray.add(new Point2D(555.0, 220.0));        pointsArray.add(new Point2D(555.0, 60.0));        pointsArray.add(new Point2D(90.0, 60.0));        pointsArray.add(new Point2D(90.0, 345.0));        pointsArray.add(new Point2D(910.0, 345.0));        pointsArray.add(new Point2D(910.0, 630.0));        pointsArray.add(new Point2D(765.0, 630.0));        pointsArray.add(new Point2D(765.0, 480.0));        pointsArray.add(new Point2D(560.0, 480.0));        pointsArray.add(new Point2D(560.0, 635.0));        pointsArray.add(new Point2D(0.0, 635.0));        this.pointsArray = pointsArray;    }    @Override    public void addWave() {        int[] turn = new int[getMaxWave()];        turn[0] = 3;        turn[1] = 5;        turn[2] = 6;        turn[3] = 7;        turn[4] = 1;        turn[5] = 4;        turn[6] = 5;        turn[7] = 8;        turn[8] = 5;        turn[9] = 1;        MonsterName[] monsterNames = new MonsterName[getMaxWave()];        monsterNames[0] = MonsterName.GreenMinion;        monsterNames[1] = MonsterName.BrowMinion;        monsterNames[2] = MonsterName.SilverMinion;        monsterNames[3] = MonsterName.GreenMinion;        monsterNames[4] = MonsterName.GreenPlane;        monsterNames[5] = MonsterName.RedMinion;        monsterNames[6] = MonsterName.BrowMinion;        monsterNames[7] = MonsterName.SilverMinion;        monsterNames[8] = MonsterName.GreenMinion;        monsterNames[9] = MonsterName.GreenTank;        for(int i = 0; i < getMaxWave(); ++i) {            this.waveArray.add(new ArrayList<>());            for(int j = 0; j < turn[i]; ++j) {                this.waveArray.get(i).add(monsterNames[i]);            }        }    }    @Override    public void addlocationRoot() {//        locationRootArray.add(new Point2D(995, 120));//        locationRootArray.add(new Point2D(825, 120));//        locationRootArray.add(new Point2D(650, 300));//        locationRootArray.add(new Point2D(710, 65));//        locationRootArray.add(new Point2D(610, 160));//        locationRootArray.add(new Point2D(470, 120));//        locationRootArray.add(new Point2D(300, 120));//        locationRootArray.add(new Point2D(140, 120));//        locationRootArray.add(new Point2D(25, 210));//        locationRootArray.add(new Point2D(140, 300));//        locationRootArray.add(new Point2D(400, 300));//        locationRootArray.add(new Point2D(650, 300));//        locationRootArray.add(new Point2D(905, 300));//        locationRootArray.add(new Point2D(990, 490));//        locationRootArray.add(new Point2D(840, 590));//        locationRootArray.add(new Point2D(660, 540));//        locationRootArray.add(new Point2D(495, 590));//        locationRootArray.add(new Point2D(660, 460));//        locationRootArray.add(new Point2D(260, 590));//        locationRootArray.add(new Point2D(25, 590));        locationRootArray.add(new Point2D(980.0, 135.0));        locationRootArray.add(new Point2D(840.0, 135.0));        locationRootArray.add(new Point2D (650.0, 145.0));        locationRootArray.add(new Point2D(475.0, 135.0));        locationRootArray.add(new Point2D(170.0, 135.0));        locationRootArray.add(new Point2D(170.0, 275.0));        locationRootArray.add(new Point2D(400.0, 275.0));        locationRootArray.add(new Point2D(650.0, 283.0));  // Tùy ý        locationRootArray.add(new Point2D(840.0, 430.0));        locationRootArray.add(new Point2D(250.0, 430.0));        locationRootArray.add(new Point2D(840.0, 565.0));        locationRootArray.add(new Point2D(450.0, 565.0));        locationRootArray.add(new Point2D(250.0, 565.0));        locationRootArray.add(new Point2D(60.0, 565.0));        locationRootArray.add(new Point2D(660.0, 555.0));    }}