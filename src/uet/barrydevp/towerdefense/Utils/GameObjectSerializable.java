package uet.barrydevp.towerdefense.Utils;import javafx.geometry.Point2D;import uet.barrydevp.towerdefense.Entity.Tower.BaseTower;import uet.barrydevp.towerdefense.Entity.Tower.TowerName;import uet.barrydevp.towerdefense.Game.GameManager;import uet.barrydevp.towerdefense.Map.MapName;import java.io.Serializable;import java.util.ArrayList;public class GameObjectSerializable implements Serializable {    private int money;    private int life;    private int level;    private int difficulty;    private int wave;    private ArrayList<TowerInfo> listTower;    public GameObjectSerializable(GameManager instance) {        if(instance != null) {            money = instance.getMoney();            life = instance.getLife();            level = instance.getMap().getLevel();            difficulty = instance.getMap().getDifficulty();            wave = instance.getMap().getWave();            listTower = new ArrayList<>();            if(instance.getTowerArray() != null) {                ArrayList<BaseTower> towerArray = instance.getTowerArray();                for(int i = 0; i < towerArray.size(); ++i) {                    BaseTower tower = towerArray.get(i);                    if(tower != null && tower.getTowerName() instanceof TowerName && tower.getBaseSprite().getCenterLocation() != null) {                        listTower.add(new TowerInfo(tower.getTowerName(), new Point2DConverted(tower.getBaseSprite().getCenterLocation())));                    }                }            }        }    }    public void loadInstanceFromObject() {        GameManager.getInstance().eraseAll();        GameManager instance = GameManager.getInstance();        if(level > 0 && difficulty > 0 && money >= 0 && life > 0 && wave >= 0) {            switch (level) {                case 1:                    switch (difficulty) {                        case 1: instance.newGame(MapName.MapLvl11);                            break;                        default: instance.newGame(MapName.MapLvl11);                    }                    break;                case 2:                    switch (difficulty) {                        case 1: instance.newGame(MapName.MapLvl21);                            break;                        default: instance.newGame(MapName.MapLvl21);                    }                    break;                case 3:                    switch (difficulty) {                        case 1: instance.newGame(MapName.MapLvl31);                            break;                        default: instance.newGame(MapName.MapLvl31);                    }                    break;            }            instance.setLife(life);            instance.setMoney(money);            instance.getMap().setWave(wave);            if(listTower != null) {                for(int i = 0; i < listTower.size(); ++i) {                    TowerInfo towerInfo = listTower.get(i);                    BaseTower tower = BaseTower.createTowerFromName(towerInfo.getTowerName(), towerInfo.getCenterLocation().toPoint2D());                    if(tower != null) {                        instance.getTowerArray().add(tower);                    }                }            }        } else {            System.out.println("Data not serializable");        }    }    public ArrayList<TowerInfo> getListTower() {        return listTower;    }    public int getLevel() {        return level;    }    public int getMoney() {        return money;    }    public int getDifficulty() {        return difficulty;    }    public int getWave() {        return wave;    }    public int getLife() {        return life;    }}class Point2DConverted implements Serializable {    double x;    double y;    public Point2DConverted(Point2D p) {        x = p.getX();        y = p.getY();    }    public Point2D toPoint2D() {        return new Point2D(x, y);    }}class TowerInfo implements Serializable {    TowerName towerName;    Point2DConverted centerLocation;    public TowerInfo(TowerName towerName, Point2DConverted centerLocation) {        this.towerName = towerName;        this.centerLocation = centerLocation;    }    public TowerName getTowerName() {        return towerName;    }    public Point2DConverted getCenterLocation() {        return centerLocation;    }}