package uet.barrydevp.towerdefense.Sprite;import javafx.geometry.Point2D;import javafx.scene.effect.DropShadow;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.input.MouseEvent;import javafx.scene.layout.Pane;import javafx.scene.paint.Color;import javafx.scene.shape.Circle;import javafx.scene.text.Font;import javafx.scene.text.FontWeight;import javafx.scene.text.Text;import uet.barrydevp.towerdefense.Game.GameManager;import uet.barrydevp.towerdefense.Game.GameMenu;import uet.barrydevp.towerdefense.Game.GameSpriteManager;import uet.barrydevp.towerdefense.Entity.Tower.BaseTower;import uet.barrydevp.towerdefense.Entity.Tower.TowerName;import java.util.ArrayList;import java.util.HashMap;import static javafx.scene.paint.Color.rgb;public class TowerSprite extends BaseSprite {    private DropShadow dropShadowNonHover;    private DropShadow dropShadowHover;    private BaseTower tower;    private Pane upgrade;    private Pane sell;    private boolean isVisibleButton;    private Image image;    ArrayList<Image> images;    private ImageView imageView;    private Circle scopeCircle;    public TowerSprite(TowerName towerName, HashMap<String, BaseSprite> childrenSprite, Point2D centerLocation, double r, BaseTower tower) {        dropShadowNonHover = new DropShadow();        dropShadowNonHover.setRadius(5.0);        dropShadowNonHover.setColor(rgb(81, 109, 81));        dropShadowHover = new DropShadow();        dropShadowHover.setRadius(8.0);        dropShadowHover.setColor(rgb(30, 63, 45));        this.images = GameSpriteManager.getInstance().getListTowerImage(towerName);        this.tower = tower;        this.childrenSprite = childrenSprite;        this.image = images.get(0);        this.centerLocation = centerLocation;        this.originalR = r;        this.r = r;        this.width = image.getWidth(); // imageView.getBoundsInParent().getWidth();        this.height = image.getHeight(); // imageView.getBoundsInParent().getHeight();        init();        this.imageView = new ImageView(this.image);        imageView.addEventFilter(MouseEvent.MOUSE_CLICKED, e -> {            isVisibleButton = !isVisibleButton;            changeVisible();        });        getChildren().add(imageView);        if(childrenSprite != null) {            GameManager.getInstance().getEffectLayer().getChildren().addAll(childrenSprite.values());        }//        relocate(centerLocation.getX() - width / 2, centerLocation.getY() - height / 2);        setTranslateX(centerLocation.getX() - width / 2);        setTranslateY(centerLocation.getY() - height / 2);//        setRotate(r);        ImageView tableInfoTower = GameMenu.getInstance().getTableInfoTower();        addEventFilter(MouseEvent.MOUSE_ENTERED_TARGET, e -> {            tableInfoTower.setImage(images.get(1));            tableInfoTower.setVisible(true);        });        addEventFilter(MouseEvent.MOUSE_EXITED_TARGET, e -> {            tableInfoTower.setVisible(false);        });    }    public ImageView getImageView() {        return imageView;    }    public Pane getSell() {        return sell;    }    public Pane getUpgrade() {        return upgrade;    }    public Circle getScopeCircle() {        return scopeCircle;    }    public void init() {        ImageView tableInfoTower = GameMenu.getInstance().getTableInfoTower();        final ImageView upgradeView = new ImageView(GameSpriteManager.getInstance().upgradeImage);        final ImageView sellView = new ImageView(GameSpriteManager.getInstance().sellImage);        upgrade = new Pane();        sell = new Pane();        isVisibleButton = false;        upgradeView.setFitWidth(40);        upgradeView.setFitHeight(40);        upgradeView.addEventFilter(MouseEvent.MOUSE_CLICKED, e -> {            tower.upgradeTower();        });        upgradeView.addEventFilter(MouseEvent.MOUSE_ENTERED_TARGET, e -> {            upgradeView.setEffect(dropShadowHover);            tableInfoTower.setImage(images.get(2));            tableInfoTower.setVisible(true);        });        upgradeView.addEventFilter(MouseEvent.MOUSE_EXITED_TARGET, e -> {            upgradeView.setEffect(dropShadowNonHover);            tableInfoTower.setVisible(false);        });        Text upgradeText = new Text();        upgradeText.setText("$ " + tower.getUpdateMoney());        upgradeText.setFont(Font.font(null, FontWeight.BOLD, 18));        upgradeText.setStroke(Color.BLACK);        upgradeText.setFill(Color.BLUEVIOLET);        upgradeText.relocate(5, -18);        upgrade.getChildren().addAll(upgradeView, upgradeText);        upgrade.setTranslateX(centerLocation.getX() - width / 2 + -15);        upgrade.setTranslateY(centerLocation.getY() - width / 2 + -35);        upgrade.setVisible(isVisibleButton);        sellView.setFitWidth(40);        sellView.setFitHeight(40);        sellView.addEventFilter(MouseEvent.MOUSE_CLICKED, e -> {            tower.sellTower();        });        sellView.addEventFilter(MouseEvent.MOUSE_ENTERED_TARGET, e -> {            sellView.setEffect(dropShadowHover);        });        sellView.addEventFilter(MouseEvent.MOUSE_EXITED_TARGET, e -> {            sellView.setEffect(dropShadowNonHover);        });        Text sellText = new Text();        sellText.setText("$ " + Math.round(tower.getBuildMoney() * 0.7f));        sellText.setFont(Font.font(null, FontWeight.BOLD, 18));        sellText.setStroke(Color.BLACK);        sellText.setFill(Color.RED);        sellText.relocate(5, -18);        sell.getChildren().addAll(sellText, sellView);        sell.setTranslateX(centerLocation.getX() - width / 2 + 35);        sell.setTranslateY(centerLocation.getY() - width / 2 + -35);        sell.setVisible(isVisibleButton);//        getChildren().addAll(upgradeView, sellView);//        getChildren().add(sellView);        GameManager.getInstance().getTowerLayer().getChildren().addAll(upgrade, sell);//        GameManager.getInstance().getTowerLayer().getChildren().add(upgradeView);    }    public void setScopeCircle(double scope) {        scopeCircle = new Circle();//        scopeCircle.setCenterX(width / 2);//        scopeCircle.setCenterY(height / 2);        scopeCircle.setCenterX(getCenterLocation().getX());        scopeCircle.setCenterY(getCenterLocation().getY());        scopeCircle.setRadius(scope);        scopeCircle.setStroke(Color.BLUE);        scopeCircle.setFill(Color.TRANSPARENT);        scopeCircle.setVisible(false);//        getChildren().add(1, scopeCircle);        GameManager.getInstance().getEffectLayer().getChildren().add(scopeCircle);    }    public void removeScope() {        GameManager.getInstance().getEffectLayer().getChildren().removeAll(scopeCircle);        GameManager.getInstance().getTowerLayer().getChildren().removeAll(sell, upgrade);    }//    public void updateUI() {//        relocate(centerLocation.getX() - width / 2, centerLocation.getY() - height / 2);////        imageView.setRotate(r);//    }    public void buildTower(BaseTower tower) {        GameManager instance = GameManager.getInstance();        System.out.println(instance.getMoney());        System.out.println(tower.getBuildMoney());        int tmpMoney = instance.getMoney() - tower.getBuildMoney();        if(tmpMoney >= 0) {            instance.setMoney(tmpMoney);            instance.getTowerArray().add(tower);            changeVisible();            GameMenu.getInstance().updateMessage("-" + tower.getBuildMoney() + "$");        } else {            tower.removeTower();            System.out.println("Haven't enought gold to build this Tower!");            GameMenu.getInstance().updateMessage("Haven't enought gold to build this Tower!");        }    }    public void changeVisible() {        upgrade.setVisible(isVisibleButton);        sell.setVisible(isVisibleButton);        scopeCircle.setVisible(isVisibleButton);    }}