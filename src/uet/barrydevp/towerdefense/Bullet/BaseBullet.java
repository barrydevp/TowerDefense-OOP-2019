package uet.barrydevp.towerdefense.Bullet;import javafx.geometry.Point2D;import uet.barrydevp.towerdefense.BaseEntity;import uet.barrydevp.towerdefense.Game.GameManager;import uet.barrydevp.towerdefense.Monster.BaseMonster;import uet.barrydevp.towerdefense.Sprite.BaseSprite;public abstract class BaseBullet extends BaseEntity {    private BulletName bulletName;    private BaseMonster targetMonster;    private double moveSpeed;    private double acceleration;    private int maxForce;    private int scope;    public BaseBullet() {        maxForce = 0;        moveSpeed = 0;        layer = GameManager.getInstance().getBulletLayer();    }    public abstract boolean init();    public void setBulletName(BulletName bulletName) {        this.bulletName = bulletName;    }    public BulletName getBulletName() {        return bulletName;    }    public void setMaxForce(int maxForce) {        this.maxForce = maxForce;    }    public int getMaxForce() {        return maxForce;    }    public void setMoveSpeed(double moveSpeed) {        this.moveSpeed = moveSpeed;    }    public double getMoveSpeed() {        return moveSpeed;    }    public void setAcceleration(double acceleration) {        this.acceleration = acceleration;    }    public double getAcceleration() {        return acceleration;    }    public void setScope(int scope) {        this.scope = scope;    }    public int getScope() {        return scope;    }    public void setTargetMonster(BaseMonster targetMonster) {        this.targetMonster = targetMonster;    }    public BaseMonster getTargetMonster() {        return targetMonster;    }    public void move(double elapsedTime) {//        GameManager instance = GameManager.getInstance();//        ArrayList<BaseMonster> monsterArray = instance.getMonsterArray();        boolean isMissed = true;        if(targetMonster != null && targetMonster.getBaseSprite() != null && targetMonster.getCurHp() > 0) {            Point2D centerLocation = baseSprite.getCenterLocation();            double ds = targetMonster.getBaseSprite().getCenterLocation().distance(centerLocation);//            System.out.println("ds:" + ds);//            System.out.println("v * time:" + runSpeed * elapsedTime);//            System.out.println(runSpeed * elapsedTime > ds);//            if((moveSpeed * elapsedTime) > ds) {//                nextPoint();//            }            Point2D vectorVelocity = targetMonster.getBaseSprite().getCenterLocation().subtract(centerLocation);            double alpha = Math.atan2(vectorVelocity.getY(), vectorVelocity.getX());            double velocityX = moveSpeed * Math.cos(alpha);            double velocityY = moveSpeed * Math.sin(alpha);            double dx = velocityX * elapsedTime;            double dy = velocityY * elapsedTime;            Point2D vectorDS = new Point2D(dx, dy);//            baseSprite.setCenterLocation(centerLocation.add(vectorDS));//            baseSprite.setR(Math.toDegrees(alpha));//            baseSprite.updateUI();            moveSpeed = moveSpeed + acceleration * elapsedTime;            baseSprite.update(centerLocation.add(vectorDS), Math.toDegrees(alpha));            fire();        } else {            GameManager.getInstance().getBulletArray().remove(this);            removeBullet();        }    }    public abstract void fire();    public void update(double dt) {        move(dt);    }    public void removeBullet() {        targetMonster = null;        removeFromLayer();    }}