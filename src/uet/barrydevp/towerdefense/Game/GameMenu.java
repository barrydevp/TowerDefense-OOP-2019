package uet.barrydevp.towerdefense.Game;import javafx.event.EventHandler;import javafx.scene.Scene;import javafx.scene.effect.DropShadow;import javafx.scene.image.ImageView;import javafx.scene.input.MouseEvent;import javafx.scene.layout.Pane;import javafx.scene.paint.Color;import javafx.scene.text.Font;import javafx.scene.text.FontWeight;import javafx.scene.text.Text;import javafx.scene.text.TextBoundsType;import javafx.stage.Stage;import uet.barrydevp.towerdefense.Map.MapName;import uet.barrydevp.towerdefense.Settings;import static javafx.scene.paint.Color.rgb;public class GameMenu {    public static GameMenu instance;    private Stage primaryStage;    private GameLoop gameLoop;    private Scene scene;    private Pane gameMainMenuPane;    private Pane gameMenuLevelPane;    private Pane gameMenuInfoPane;    private Pane gameOverPane;    ImageView tableInfoTower;    Text scoreText = new Text();    Text FPSText = new Text();    int score = 0;    private EventHandler<MouseEvent> handlerPlayGame = new EventHandler<MouseEvent>() {        @Override        public void handle(MouseEvent e) {            startMenuLevelGame();            primaryStage.setTitle("MainMenu/Game");            primaryStage.setScene(scene);            primaryStage.show();        }    };    private EventHandler<MouseEvent> handlerContinuteGame = new EventHandler<MouseEvent>() {        @Override        public void handle(MouseEvent e) {            gameLoop.start();            GameManager.getInstance().getMap().setStart(true);            scene = GameScene.getInstance().getSceneInGame();            primaryStage.setTitle("Continute/Game");            primaryStage.setScene(scene);            primaryStage.show();        }    };    private EventHandler<MouseEvent> handlerChooseLevel1 = new EventHandler<MouseEvent>() {        @Override        public void handle(MouseEvent e) {            GameManager.getInstance().eraseAll();            GameManager.getInstance().newGame(MapName.MapLvl11);            startInGame();            primaryStage.setTitle("DefenseTowerLevel1/Game");            primaryStage.setScene(scene);            gameLoop = new GameLoop(primaryStage);            gameLoop.start();            primaryStage.show();        }    };    private EventHandler<MouseEvent> handlerChooseLevel2 = new EventHandler<MouseEvent>() {        @Override        public void handle(MouseEvent e) {            GameManager.getInstance().eraseAll();            GameManager.getInstance().newGame(MapName.MapLvl21);            startInGame();            primaryStage.setTitle("DefenseTowerLevel2/Game");            primaryStage.setScene(scene);            gameLoop = new GameLoop(primaryStage);            gameLoop.start();            primaryStage.show();        }    };    private EventHandler<MouseEvent> handlerChooseLevel3 = new EventHandler<MouseEvent>() {        @Override        public void handle(MouseEvent e) {            GameManager.getInstance().eraseAll();            GameManager.getInstance().newGame(MapName.MapLvl31);            startInGame();            primaryStage.setTitle("DefenseTowerLevel3/Game");            primaryStage.setScene(scene);            gameLoop = new GameLoop(primaryStage);            gameLoop.start();            primaryStage.show();        }    };    private EventHandler<MouseEvent> handlerBackMainMenu = new EventHandler<MouseEvent>() {        @Override        public void handle(MouseEvent e) {            gameLoop.stop();            GameManager.getInstance().getMap().setStart(false);            createMainMenuLayer(true);            startMainMenuGame();            primaryStage.setTitle("MainMenu/Game");            primaryStage.setScene(scene);            primaryStage.show();        }    };    private EventHandler<MouseEvent> handlerPlayAgain = new EventHandler<MouseEvent>() {        @Override        public void handle(MouseEvent e) {            startMenuLevelGame();            primaryStage.setTitle("MainMenu/Game");            primaryStage.setScene(scene);            primaryStage.show();        }    };    public static GameMenu getInstance() {        if (instance == null) {            instance = new GameMenu();            instance.CreateGameMenu();        }        return instance;    }    private void CreateGameMenu() {        createMainMenuLayer(false);        createMenuLevelLayer();        createMenuInfoLayer();        createScoreGame();        createTableInfoIconTower();        createGameOverLayer();    }    public ImageView getTableInfoTower() {        return tableInfoTower;    }    public Stage getPrimaryStage() {        return primaryStage;    }    public void setPrimaryStage(Stage primaryStage) {        this.primaryStage = primaryStage;    }    public Scene getScene() {        return scene;    }    public Pane getMainMenuPane() {        return gameMainMenuPane;    }    public Pane getMenuLevelPane() {        return gameMenuLevelPane;    }    public Pane getMenuInfoPane() {        return gameMenuInfoPane;    }    public Pane getGameOverPane() {        return gameOverPane;    }    public void startMainMenuGame() {        GameScene instanceGameScene = GameScene.getInstance();        instanceGameScene.createSceneMainMenuGame();        scene = instanceGameScene.getSceneMainMenuGame();    }    public void startMenuLevelGame() {        GameScene instanceGameScene = GameScene.getInstance();        instanceGameScene.createSceneMenuLevelGame();        scene = instanceGameScene.getSceneMenuLevelGame();    }    public void startInGame() {        GameManager instanceGameManager = GameManager.getInstance();        GameSpriteManager instanceSprite = GameSpriteManager.getInstance();        GameScene instanceGameScene = GameScene.getInstance();        instanceGameManager.getMap().setStart(true);        instanceGameScene.createSceenInGame();        scene = instanceGameScene.getSceneInGame();        System.out.println(instanceGameManager.getLife());    }    public void updateGameOver() {        // System.out.println("---- Game Over ----");        GameManager.getInstance().eraseAll();        gameLoop.stop();        GameScene.getInstance().createSceneGameOver();        scene = GameScene.getInstance().getSceneGameOver();        primaryStage.setTitle("PlayAgain/Game");        primaryStage.setScene(scene);        primaryStage.show();    }    private void createMainMenuLayer(boolean isPaused) {        gameMainMenuPane = new Pane();        gameMainMenuPane.setPrefSize(Settings.SCENE_WIDTH, Settings.SCENE_HEIGHT);        gameMainMenuPane.setStyle("-fx-background-color: rgb(68,255,204);");        GameSpriteManager instanceSprite = GameSpriteManager.getInstance();        ImageView playGame = new ImageView(instanceSprite.buttonPlayGame);        playGame.relocate(Settings.SCENE_WIDTH / 2 - instanceSprite.buttonPlayGame.getWidth() / 2, 350);        playGame.setEffect(effectShadow());        playGame.addEventFilter(MouseEvent.MOUSE_CLICKED, handlerPlayGame);        ImageView continuteGame = new ImageView(instanceSprite.buttonContinute);        continuteGame.relocate(Settings.SCENE_WIDTH / 2 - instanceSprite.buttonContinute.getWidth() / 2, 200);        continuteGame.setEffect(effectShadow());        continuteGame.addEventFilter(MouseEvent.MOUSE_CLICKED, handlerContinuteGame);        continuteGame.setEffect(effectShadow());        // add pane        gameMainMenuPane.getChildren().addAll(playGame, continuteGame);        if (!isPaused) {            gameMainMenuPane.getChildren().remove(continuteGame);        }    }/*    private void updateScore() {        scoreText.setText(String.valueOf(score));    }    private void updateFPS(double FPS) {        FPSText.setText(String.format("%.2f", FPS));    }*/    private void createMenuLevelLayer() {        gameMenuLevelPane = new Pane();        gameMenuLevelPane.setPrefSize(Settings.SCENE_WIDTH, Settings.SCENE_HEIGHT);        gameMenuLevelPane.setStyle("-fx-background-color: rgb(68,255,204);");        GameSpriteManager instanceSprite = GameSpriteManager.getInstance();        ImageView titleGame = new ImageView(instanceSprite.imageTitle);        ImageView buttonMapLvl1 = new ImageView(instanceSprite.buttonLevel1);        ImageView buttonMapLvl2 = new ImageView(instanceSprite.buttonLevel2);        ImageView buttonMapLvl3 = new ImageView(instanceSprite.buttonLevel3);        titleGame.relocate(Settings.SCENE_WIDTH / 2 - instanceSprite.imageTitle.getWidth() / 2, 100);        buttonMapLvl1.relocate(0.25 * Settings.SCENE_WIDTH - instanceSprite.buttonLevel1.getWidth() / 2, 400);        buttonMapLvl2.relocate(Settings.SCENE_WIDTH / 2 - instanceSprite.buttonLevel2.getWidth() / 2, 400);        buttonMapLvl3.relocate(0.75 * Settings.SCENE_WIDTH - instanceSprite.buttonLevel3.getWidth() / 2, 400);        buttonMapLvl3.setEffect(effectShadow());        buttonMapLvl1.setEffect(effectShadow());        buttonMapLvl2.setEffect(effectShadow());        buttonMapLvl1.addEventFilter(MouseEvent.MOUSE_CLICKED, handlerChooseLevel1);        buttonMapLvl2.addEventFilter(MouseEvent.MOUSE_CLICKED, handlerChooseLevel2);        buttonMapLvl3.addEventFilter(MouseEvent.MOUSE_CLICKED, handlerChooseLevel3);        // add pane        gameMenuLevelPane.getChildren().addAll(titleGame, buttonMapLvl1, buttonMapLvl2, buttonMapLvl3);    }    private void createMenuInfoLayer() {        gameMenuInfoPane = new Pane();        gameMenuInfoPane.setPrefSize(Settings.SCENE_WIDTH * 0.2, Settings.SCENE_HEIGHT);        gameMenuInfoPane.setMaxSize(Settings.SCENE_WIDTH * 0.2, Settings.SCENE_HEIGHT);        gameMenuInfoPane.setStyle("-fx-background-color: rgb(68,255,204);");        GameSpriteManager instanceSprite = GameSpriteManager.getInstance();        ImageView backMainMenu = new ImageView(instanceSprite.buttonMainMenu);        double widthPane = gameMenuInfoPane.getMaxWidth();        double heightPane = gameMenuInfoPane.getMaxHeight();        backMainMenu.relocate(widthPane * 0.5 - instanceSprite.buttonMainMenu.getWidth() / 2, 600.0);        backMainMenu.setEffect(effectShadow());        backMainMenu.addEventFilter(MouseEvent.MOUSE_CLICKED, handlerBackMainMenu);        // add pane        gameMenuInfoPane.getChildren().add(backMainMenu);    }    private void createGameOverLayer() {        gameOverPane = new Pane();        gameOverPane.setPrefSize(Settings.SCENE_WIDTH, Settings.SCENE_HEIGHT);        gameOverPane.setStyle("-fx-background-color: rgb(69,198,172);");        GameSpriteManager instanceSprite = GameSpriteManager.getInstance();        ImageView playAgain = new ImageView(instanceSprite.buttonPlayAgain);        playAgain.relocate(Settings.SCENE_WIDTH / 2 - instanceSprite.buttonPlayAgain.getWidth() / 2, 300);        playAgain.setEffect(effectShadow());        playAgain.addEventFilter(MouseEvent.MOUSE_CLICKED, handlerPlayAgain);        // add pane        gameOverPane.getChildren().add(playAgain);    }    private void createScoreGame() {        scoreText = new Text();        FPSText = new Text();        int score = 0;        // score =        // Score        scoreText.setText("Score:  " + score);        scoreText.setFont(Font.font(null, FontWeight.BOLD, 20));        scoreText.setStroke(Color.BLACK);        scoreText.setFill(Color.RED);        scoreText.relocate(30.0, 450.0);        scoreText.setBoundsType(TextBoundsType.VISUAL);        // FPS        FPSText.setText("FPS: " + 60.0);        FPSText.setFont(Font.font(null, FontWeight.BOLD, 20));        FPSText.setStroke(Color.BLACK);        FPSText.setFill(Color.RED);        FPSText.relocate(30.0, 500.0);        FPSText.setBoundsType(TextBoundsType.VISUAL);        gameMenuInfoPane.getChildren().add(scoreText);        gameMenuInfoPane.getChildren().add(FPSText);    }    private DropShadow effectShadow() {        DropShadow dropShadow = new DropShadow();        dropShadow.setRadius(5.0);        dropShadow.setOffsetX(5.0);        dropShadow.setOffsetY(5.0);        dropShadow.setColor(rgb(41, 75, 71));        return dropShadow;    }    private void createTableInfoIconTower() {        tableInfoTower = new ImageView();        gameMenuInfoPane.getChildren().add(tableInfoTower);        double posX = gameMenuInfoPane.getMaxWidth() * 0.5 - 185 * 0.5;        tableInfoTower.relocate(posX, 20);        tableInfoTower.setEffect(effectShadow());    }}