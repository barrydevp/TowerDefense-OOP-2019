package uet.barrydevp.towerdefense.Game;import javafx.scene.layout.Pane;import javafx.stage.Stage;import uet.barrydevp.towerdefense.Bullet.BaseBullet;import uet.barrydevp.towerdefense.Map.BaseMap;import uet.barrydevp.towerdefense.Map.MapLvl1;import uet.barrydevp.towerdefense.Map.MapName;import uet.barrydevp.towerdefense.Monster.BaseMonster;import uet.barrydevp.towerdefense.Sprite.RootTower;import uet.barrydevp.towerdefense.Tower.BaseTower;import java.util.ArrayList;public class GameManager {    private static GameManager instance;    private Stage primaryStage;    private Pane monsterLayer;    private Pane effectLayer;    private Pane bulletLayer;    private Pane towerLayer;//    private Pane gameFieldPane;    private BaseMap map;    private ArrayList<BaseMonster> monsterArray;    private ArrayList<BaseTower> towerArray;    private ArrayList<RootTower> rootTowerArray;    private ArrayList<BaseBullet> bulletArray;    private int money;    private int life;    private int level;    private GameManager(){}    public void CreateGameManager() {        map = null;        rootTowerArray = new ArrayList<>();        monsterArray = new ArrayList<>();        towerArray = new ArrayList<>();        bulletArray = new ArrayList<>();        money = 0;        life = 0;        level = 0;        monsterLayer = new Pane();        monsterLayer.relocate(0, 0);        effectLayer = new Pane();        effectLayer.relocate(0, 0);        bulletLayer = new Pane();        bulletLayer.relocate(0, 0);        towerLayer = new Pane();        towerLayer.relocate(0, 0);    }    public static GameManager getInstance(){        if(instance == null){            instance = new GameManager();            instance.CreateGameManager();        }        return instance;    }    public ArrayList<BaseMonster> getMonsterArray() {        return monsterArray;    }    public ArrayList<RootTower> getRootTowerArray() {        return rootTowerArray;    }    public ArrayList<BaseTower> getTowerArray() {        return towerArray;    }    public ArrayList<BaseBullet> getBulletArray() {        return bulletArray;    }    public Pane getTowerLayer() {        return towerLayer;    }    public Pane getMonsterLayer() {        return monsterLayer;    }    public Pane getEffectLayer() {        return effectLayer;    }    public Pane getBulletLayer() {        return bulletLayer;    }//    public void setMonsterLayer(Pane monsterLayer) {//        this.monsterLayer = monsterLayer;//    }    public BaseMap getMap() {        return map;    }    public void setMap(BaseMap map) {        this.map = map;    }    public void newGame(MapName mapName) {        eraseAll();        BaseMap map = null;        switch (mapName) {            case MapLvl1:                map = MapLvl1.createMap();                break;        }        this.map = map;        map.setStart(false);    }    public int getLife() {        return life;    }    public void setLife(int life) {        this.life = life;    }    public int getMoney() {        return money;    }    public void setMoney(int money) {        this.money = money;    }    public int getLevel() {        return level;    }    public void setLevel(int level) {        this.level = level;    }    public void removeMonster(BaseMonster monster) {        monsterArray.remove(monster);    }    public void eraseAll() {        monsterArray.clear();        towerArray.clear();        rootTowerArray.clear();        bulletArray.clear();        monsterLayer = new Pane();        bulletLayer = new Pane();        towerLayer = new Pane();    }    public void updateGame(double dt) {        if(dt == 0) {            map.setStart(true);        }        if(map.isStart() && !map.isEnd() && life > 0) {            map.spawnMonster(dt);            for (int i = 0; i < bulletArray.size(); i++) {                bulletArray.get(i).update(dt);            }            for (int i = 0; i < towerArray.size(); i++) {                towerArray.get(i).update(dt);            }            for (int i = 0; i < monsterArray.size(); i++) {                if(dt < 1.0){                    monsterArray.get(i).update(dt);                }            }        }        if(life <= 0) eraseAll();        if(map.isEnd()) eraseAll();    }}