package uet.barrydevp.towerdefense.Game;import javafx.animation.AnimationTimer;import javafx.animation.ScaleTransition;import javafx.scene.canvas.Canvas;import javafx.scene.canvas.GraphicsContext;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.layout.Pane;import javafx.util.Duration;import java.util.ArrayList;public class AnimationMenu {    public static AnimationMenu instance;    private Pane animationGameOverLayer;    private Pane animationMainMenuLayer;    private Pane animationVictoryGameLayer;    private ImageView aniMainMenu;    private ImageView aniVictoryGame;    private Canvas aniGameOver;    public static AnimationMenu getInstance() {        if (instance == null) {            instance = new AnimationMenu();            instance.CreateAnimationMenu();        }        return instance;    }    private void CreateAnimationMenu() {        createAnimationMainMenuLayer();        createAnimationGameOverLayer();        createAnimationVictoryGameLayer();    }    public Pane getAnimationGameOverLayer() {        return animationGameOverLayer;    }    public Pane getAnimationMainMenuLayer() {        return animationMainMenuLayer;    }    public Pane getAnimationVictoryGameLayer() {        return animationVictoryGameLayer;    }    private void createAnimationMainMenuLayer() {        animationMainMenuLayer = new Pane();        animationMainMenuLayer.setPrefSize(GameSetting.SCENE_WIDTH, GameSetting.SCENE_HEIGHT);        animationMainMenuLayer.relocate(0.0, 0.0);        GameSpriteManager instanceGameSprite = GameSpriteManager.getInstance();        aniMainMenu = new ImageView(instanceGameSprite.effectMainMenu);        double posX = GameSetting.SCENE_WIDTH * 0.5 - instanceGameSprite.effectMainMenu.getWidth() * 0.5;        aniMainMenu.relocate(posX, 100);        animationMainMenuLayer.getChildren().add(aniMainMenu);    }    private void createAnimationGameOverLayer() {        animationGameOverLayer = new Pane();        animationGameOverLayer.setPrefSize(GameSetting.SCENE_WIDTH, GameSetting.SCENE_HEIGHT);        animationGameOverLayer.relocate(0.0, 0.0);        animationGameOverLayer.setStyle("-fx-background-color: rgb(44, 147, 105)");        aniGameOver = new Canvas(animationGameOverLayer.getPrefWidth(), animationGameOverLayer.getPrefHeight());        animationGameOverLayer.getChildren().add(aniGameOver);    }    private void createAnimationVictoryGameLayer() {        animationVictoryGameLayer = new Pane();        animationVictoryGameLayer.setPrefSize(GameSetting.SCENE_WIDTH, GameSetting.SCENE_HEIGHT);        animationVictoryGameLayer.relocate(0.0, 0.0);        GameSpriteManager instanceGameSprite = GameSpriteManager.getInstance();        aniVictoryGame = new ImageView(instanceGameSprite.effectGameVictory);        double posX = GameSetting.SCENE_WIDTH * 0.5 - instanceGameSprite.effectGameVictory.getWidth() * 0.5;        aniVictoryGame.relocate(posX, 100);        animationVictoryGameLayer.getChildren().add(aniVictoryGame);    }    public void startAnimationVictoryGame() {        ScaleTransition stVictoryGame = new ScaleTransition(Duration.millis(5000),                aniVictoryGame);        stVictoryGame.setByX(1.1f);        stVictoryGame.setByY(1.1f);        stVictoryGame.setCycleCount(2);        stVictoryGame.setAutoReverse(true);        stVictoryGame.play();    }    public void startAnimationMainMenu() {        ScaleTransition stMainMenu = new ScaleTransition(Duration.millis(5000),                aniMainMenu);        stMainMenu.setByX(1.1f);        stMainMenu.setByY(1.1f);        stMainMenu.setCycleCount(2);        stMainMenu.setAutoReverse(true);        stMainMenu.play();    }    public void startAnimationGameOver() {        GraphicsContext gc = aniGameOver.getGraphicsContext2D();        GameSpriteManager instanceGameSprite = GameSpriteManager.getInstance();        ArrayList<Image> frames = new ArrayList<>();        frames.add(instanceGameSprite.effectGameOver1);        frames.add(instanceGameSprite.effectGameOver2);        frames.add(instanceGameSprite.effectGameOver3);        frames.add(instanceGameSprite.effectGameOver4);        frames.add(instanceGameSprite.effectGameOver5);        frames.add(instanceGameSprite.effectGameOver6);        frames.add(instanceGameSprite.effectGameOver7);        frames.add(instanceGameSprite.effectGameOver8);        frames.add(instanceGameSprite.effectGameOver9);        frames.add(instanceGameSprite.effectGameOver10);        double posX = GameSetting.SCENE_WIDTH * 0.5 - instanceGameSprite.effectGameOver1.getWidth() * 0.5;        double duration = 0.8;        final long startNanoTime = System.nanoTime();        new AnimationTimer() {            public void handle(long currentNanoTime) {                double tmp = (currentNanoTime - startNanoTime) / 1000000000.0;//                int index = (int) ((tmp % (frames.size() * duration)) / duration);                int index = (int) (tmp % duration * frames.size() / duration);                gc.drawImage(frames.get(index), posX, 50);            }        }.start();    }}