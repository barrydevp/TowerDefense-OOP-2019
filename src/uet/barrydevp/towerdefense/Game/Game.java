package uet.barrydevp.towerdefense.Game;//import game.towerdefense.sprites.Enemy;//import game.towerdefense.sprites.SpriteBase;//import game.towerdefense.sprites.Tower;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Random;import javafx.animation.Animation;import javafx.animation.AnimationTimer;import javafx.animation.KeyFrame;import javafx.animation.Timeline;import javafx.application.Application;import javafx.geometry.Point2D;import javafx.scene.Group;import javafx.scene.Scene;import javafx.scene.effect.DropShadow;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.input.MouseEvent;import javafx.scene.layout.Pane;import javafx.scene.paint.Color;import javafx.scene.text.Font;import javafx.scene.text.FontWeight;import javafx.scene.text.Text;import javafx.scene.text.TextBoundsType;import javafx.scene.transform.Scale;import javafx.stage.Stage;import javafx.util.Duration;import uet.barrydevp.towerdefense.Enemy;import uet.barrydevp.towerdefense.Map.BaseMap;import uet.barrydevp.towerdefense.Map.MapLvl1;import uet.barrydevp.towerdefense.Monster.BaseMonster;import uet.barrydevp.towerdefense.Monster.Bosses.GreenPlane;import uet.barrydevp.towerdefense.Monster.Bosses.SilverPlane;import uet.barrydevp.towerdefense.Monster.Minions.BrowMinion;import uet.barrydevp.towerdefense.Monster.Minions.GreenMinion;import uet.barrydevp.towerdefense.Monster.Minions.RedMinion;import uet.barrydevp.towerdefense.Monster.Minions.SilverMinion;import uet.barrydevp.towerdefense.Settings;import uet.barrydevp.towerdefense.SpriteBase;import uet.barrydevp.towerdefense.Tower;public class Game extends Application {    Random rnd = new Random();    Pane backgroundLayer;    Pane playfieldLayer;    Pane scoreLayer;    Image backgroundImage;    Image playerImage;    Image enemyImage;    List<Tower> towers = new ArrayList<>();    List<Enemy> enemies = new ArrayList<>();//    List<BaseMonster> monsters = new ArrayList<BaseMonster>();    ArrayList<Point2D> pointsArray = new ArrayList<>();;    Text scoreText = new Text();    Text FPSText = new Text();    int score = 0;    double lastTimeSpawn = 0.0;    Scene scene;    @Override    public void start(Stage primaryStage) {        // create test point Array//        pointsArray.add(new Point2D(0.0, 100.0));//        pointsArray.add(new Point2D(400.0, 200.0));//        pointsArray.add(new Point2D(800.0, 100.0));//        pointsArray.add(new Point2D(1200.0, 300.0));//        pointsArray.add(new Point2D(800.0, 400.0));//        pointsArray.add(new Point2D(400.0, 400.0));//        pointsArray.add(new Point2D(200.0, 200.0));        GameManager.getInstance();        GameSpriteManager.getInstance();        BaseMap map = MapLvl1.createMap();        map.setStart(true);        Group root = new Group();        // create layers        backgroundLayer = new Pane();        playfieldLayer = GameManager.getInstance().getGameFieldPane();        scoreLayer = new Pane();        Group groupPane = new Group();        groupPane.getChildren().addAll(backgroundLayer, playfieldLayer, scoreLayer);//        root.getChildren().add( backgroundLayer);//        root.getChildren().add( playfieldLayer);//        root.getChildren().add( scoreLayer);        root.getChildren().add( groupPane);        // ensure the playfield size so that we can click on it        playfieldLayer.setPrefSize( Settings.SCENE_WIDTH, Settings.SCENE_HEIGHT);        // add event handler to create towers        playfieldLayer.addEventFilter(MouseEvent.MOUSE_CLICKED, e -> {            System.out.println(e.getX() + "--" + e.getY());            createTower(e.getX(), e.getY());        });        scene = new Scene( root, Settings.SCENE_WIDTH, Settings.SCENE_HEIGHT);        primaryStage.setScene( scene);        // fullscreen        primaryStage.setFullScreen( Settings.STAGE_FULLSCREEN);        primaryStage.setFullScreenExitHint("");        // scale by factor of 2 (in settings we have half-hd) to get proper dimensions in fullscreen (full-hd)        if( primaryStage.isFullScreen()) {            Scale scale = new Scale( Settings.STAGE_FULLSCREEN_SCALE, Settings.STAGE_FULLSCREEN_SCALE);            scale.setPivotX(0);            scale.setPivotY(0);            scene.getRoot().getTransforms().setAll(scale);        }        primaryStage.show();        loadGame();        createBackgroundLayer();//        createPlayfieldLayer();//        createScoreLayer();//        createTowers();        AnimationTimer gameLoop = new AnimationTimer() {            private long lastTime = 0;            private long curTime = 0;            @Override            public void handle(long now) {                lastTime = curTime;                curTime = now;                long elapsedTime = curTime - lastTime;                double tmp = elapsedTime / 1000000000.0;                if(elapsedTime == 0) {                    map.setStart(true);                }                map.spawnMonster(tmp);                // check if target is still valid//                towers.forEach( tower -> tower.checkTarget());                // tower movement: find target//                for( Tower tower: towers) {//                    tower.findTarget( enemies);//                }                // movement//                towers.forEach(sprite -> sprite.move(elapsedTime));//                enemies.forEach(sprite -> sprite.move(elapsedTime));//                System.out.println(GameManager.getInstance().getMonsterArray());                ArrayList<BaseMonster> monsters = GameManager.getInstance().getMonsterArray();                for (int i = 0; i < monsters.size(); i++) {                    if(tmp < 1.0)                        monsters.get(i).update(tmp);                }                // check collisions//                checkCollisions();                // update sprites in scene//                towers.forEach(sprite -> sprite.updateUI());//                enemies.forEach(sprite -> sprite.updateUI());                // check if sprite can be removed//                enemies.forEach(sprite -> sprite.checkRemovability());                // remove removables from list, layer, etc//                removeSprites( enemies);                // update score, health, etc                updateScore();                updateFPS(60.0);            }        };        gameLoop.start();//        Timeline gameLoop = new Timeline(new KeyFrame(Duration.millis(1000/240), e -> {////            System.out.println(e.getEventType());////            spawnEnemies( true);////            // check if target is still valid//            towers.forEach( tower -> tower.checkTarget());////            // tower movement: find target//            for( Tower tower: towers) {//                tower.findTarget( enemies);//            }////            // movement//            towers.forEach(sprite -> sprite.move());//            enemies.forEach(sprite -> sprite.move());////            // check collisions//            checkCollisions();////            // update sprites in scene//            towers.forEach(sprite -> sprite.updateUI());//            enemies.forEach(sprite -> sprite.updateUI());////            // check if sprite can be removed//            enemies.forEach(sprite -> sprite.checkRemovability());////            // remove removables from list, layer, etc//            removeSprites( enemies);////            // update score, health, etc//            updateScore();//            updateFPS(60.0);//        }));////        gameLoop.setCycleCount(Animation.INDEFINITE);//        gameLoop.playFromStart();    }    private void updateFPS(double FPS) {        FPSText.setText( String.format("%.2f", FPS));    }    private void loadGame() {        backgroundImage = new Image( getClass().getResource("/buttons/DefineButton2_54/1.png").toExternalForm(), 10, 10, false, false);        enemyImage = new Image( getClass().getResource("/PNG/Defaultsize/towerDefense_tile271.png").toExternalForm());        playerImage = new Image( getClass().getResource("/PNG/Defaultsize/towerDefense_tile249.png").toExternalForm());    }    private void createBackgroundLayer() {        ImageView background = new ImageView( backgroundImage);        backgroundLayer.getChildren().add( background);    }    private void createPlayfieldLayer() {        // shadow effect to show depth        // setting it on the entire group/layer preserves the shadow angle even if the node son the layer are rotated        DropShadow dropShadow = new DropShadow();        dropShadow.setRadius(5.0);        dropShadow.setOffsetX(10.0);        dropShadow.setOffsetY(10.0);        playfieldLayer.setEffect(dropShadow);    }    private void createScoreLayer() {        scoreText.setFont( Font.font( null, FontWeight.BOLD, 48));        FPSText.setFont( Font.font( null, FontWeight.BOLD, 48));        scoreText.setStroke(Color.BLACK);        FPSText.setStroke(Color.BLACK);        scoreText.setFill(Color.RED);        FPSText.setFill(Color.RED);        scoreLayer.getChildren().add( scoreText);        scoreLayer.getChildren().add( FPSText);        scoreText.setText( String.valueOf( score));        FPSText.setText( String.valueOf( 60.0));        double x = (Settings.SCENE_WIDTH - scoreText.getBoundsInLocal().getWidth()) / 2;        double y = 0;        scoreText.relocate(x, y);        FPSText.relocate(0, y);        scoreText.setBoundsType(TextBoundsType.VISUAL);        FPSText.setBoundsType(TextBoundsType.VISUAL);    }    private void createTowers() {        // position initial towers        List<Point2D> towerPositionList = new ArrayList<>();//  towerPositionList.add(new Point2D( 100, 200));//  towerPositionList.add(new Point2D( 100, 400));//  towerPositionList.add(new Point2D( 1160, 200));//  towerPositionList.add(new Point2D( 1160, 600));        for( Point2D pos: towerPositionList) {            createTower( pos.getX(), pos.getY());        }    }    private void createTower( double x, double y) {        Image image = playerImage;        // center image at position        x -= image.getWidth() / 2;        y -= image.getHeight() / 2;        // create player        Tower player = new Tower(playfieldLayer, image, x, y, 180, 0, 0, 0, Settings.PLAYER_SHIP_HEALTH, 0, Settings.PLAYER_SHIP_SPEED);        // register player        towers.add( player);    }    private void spawnEnemies(double elapsedTime) {        lastTimeSpawn += elapsedTime;        if(lastTimeSpawn > 1.0){            BaseMonster monster = null;            switch (rnd.nextInt(6)){                case 0:                    monster = GreenMinion.createMonster(pointsArray);                    break;                case 1:                    monster = SilverMinion.createMonster(pointsArray);                    break;                case 2:                    monster = RedMinion.createMonster(pointsArray);                    break;                case 3:                    monster = BrowMinion.createMonster(pointsArray);                    break;                case 4:                    monster = GreenPlane.createMonster(pointsArray);                    break;                case 5:                    monster = SilverPlane.createMonster(pointsArray);                    break;            }            // manage sprite            if(monster != null){                GameManager.getInstance().getMonsterArray().add(monster);            }            lastTimeSpawn = 0;        }    }    private void removeSprites(  List<? extends SpriteBase> spriteList) {        Iterator<? extends SpriteBase> iter = spriteList.iterator();        while( iter.hasNext()) {            SpriteBase sprite = iter.next();            if( sprite.isRemovable()) {                // remove from layer                sprite.removeFromLayer();                // remove from list                iter.remove();            }        }    }    private void checkCollisions() {        for( Tower tower: towers) {            for( Enemy enemy: enemies) {                if( tower.hitsTarget( enemy)) {                    enemy.getDamagedBy( tower);                    // TODO: explosion                    if( !enemy.isAlive()) {                        enemy.setRemovable(true);                        // increase score                        score++;                    }                }            }        }    }    private void updateScore() {        scoreText.setText( String.valueOf( score));    }    public static void main(String[] args) {        launch(args);    }}