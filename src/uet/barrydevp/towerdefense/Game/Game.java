package uet.barrydevp.towerdefense.Game;import javafx.application.Application;import javafx.scene.Scene;import javafx.scene.effect.DropShadow;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.layout.Pane;import javafx.scene.paint.Color;import javafx.scene.text.Font;import javafx.scene.text.FontWeight;import javafx.scene.text.Text;import javafx.scene.text.TextBoundsType;import javafx.scene.transform.Scale;import javafx.stage.Stage;import uet.barrydevp.towerdefense.Map.MapName;import uet.barrydevp.towerdefense.Settings;public class Game extends Application {    Pane backgroundLayer;//    Pane monsterLayer;    Pane scoreLayer;    Image backgroundImage;    Text scoreText = new Text();    Text FPSText = new Text();    int score = 0;    Scene scene;    @Override    public void start(Stage primaryStage) {        GameManager instance = GameManager.getInstance();        GameSpriteManager.getInstance();        instance.newGame(MapName.MapLvl31);        instance.getMap().setStart(true);        scene = GameScene.getInstance().getSceneInGame();        primaryStage.setScene( scene);        // fullscreen        primaryStage.setFullScreen( Settings.STAGE_FULLSCREEN);        primaryStage.setFullScreenExitHint("");        // scale by factor of 2 (in settings we have half-hd) to get proper dimensions in fullscreen (full-hd)        if( primaryStage.isFullScreen()) {            Scale scale = new Scale( Settings.STAGE_FULLSCREEN_SCALE, Settings.STAGE_FULLSCREEN_SCALE);            scale.setPivotX(0);            scale.setPivotY(0);            scene.getRoot().getTransforms().setAll(scale);        }        primaryStage.show();        GameLoop gameLoop = new GameLoop(primaryStage);        gameLoop.start();    }    private void updateFPS(double FPS) {        FPSText.setText( String.format("%.2f", FPS));    }    private void createBackgroundLayer() {        ImageView background = new ImageView( backgroundImage);        backgroundLayer.getChildren().add( background);    }    private void createPlayfieldLayer() {        // shadow effect to show depth        // setting it on the entire group/layer preserves the shadow angle even if the node son the layer are rotated        DropShadow dropShadow = new DropShadow();        dropShadow.setRadius(5.0);        dropShadow.setOffsetX(10.0);        dropShadow.setOffsetY(10.0);//        monsterLayer.setEffect(dropShadow);    }    private void createScoreLayer() {        scoreText.setFont( Font.font( null, FontWeight.BOLD, 48));        FPSText.setFont( Font.font( null, FontWeight.BOLD, 48));        scoreText.setStroke(Color.BLACK);        FPSText.setStroke(Color.BLACK);        scoreText.setFill(Color.RED);        FPSText.setFill(Color.RED);        scoreLayer.getChildren().add( scoreText);        scoreLayer.getChildren().add( FPSText);        scoreText.setText( String.valueOf( score));        FPSText.setText( String.valueOf( 60.0));        double x = (Settings.SCENE_WIDTH - scoreText.getBoundsInLocal().getWidth()) / 2;        double y = 0;        scoreText.relocate(x, y);        FPSText.relocate(0, y);        scoreText.setBoundsType(TextBoundsType.VISUAL);        FPSText.setBoundsType(TextBoundsType.VISUAL);    }    private void updateScore() {        scoreText.setText( String.valueOf( score));    }    public static void main(String[] args) {        launch(args);    }}