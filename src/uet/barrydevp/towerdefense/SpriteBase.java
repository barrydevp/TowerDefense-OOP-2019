package uet.barrydevp.towerdefense;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.layout.Pane;public abstract class SpriteBase {    public Image image;    public ImageView imageView;    public Pane layer;    public double x;    public double y;    public double r;    public double dx;    public double dy;    public double dr;    public double health;    public double damage;    public boolean removable = false;    public double w;    public double h;    public boolean canMove = true;    public SpriteBase(Pane layer, Image image, double x, double y, double r, double dx, double dy, double dr, double health, double damage) {        this.layer = layer;        this.image = image;        this.x = x;        this.y = y;        this.r = r;        this.dx = dx;        this.dy = dy;        this.dr = dr;        this.health = health;        this.damage = damage;        this.imageView = new ImageView(image);        this.imageView.relocate(x, y);        this.imageView.setRotate(r);        this.w = image.getWidth(); // imageView.getBoundsInParent().getWidth();        this.h = image.getHeight(); // imageView.getBoundsInParent().getHeight();        addToLayer();    }    public void addToLayer() {        this.layer.getChildren().add(this.imageView);    }    public void removeFromLayer() {        this.layer.getChildren().remove(this.imageView);    }    public Pane getLayer() {        return layer;    }    public void setLayer(Pane layer) {        this.layer = layer;    }    public double getX() {        return x;    }    public void setX(double x) {        this.x = x;    }    public double getY() {        return y;    }    public void setY(double y) {        this.y = y;    }    public double getR() {        return r;    }    public void setR(double r) {        this.r = r;    }    public double getDx() {        return dx;    }    public void setDx(double dx) {        this.dx = dx;    }    public double getDy() {        return dy;    }    public void setDy(double dy) {        this.dy = dy;    }    public double getDr() {        return dr;    }    public void setDr(double dr) {        this.dr = dr;    }    public double getHealth() {        return health;    }    public double getDamage() {        return damage;    }    public void setDamage(double damage) {        this.damage = damage;    }    public void setHealth(double health) {        this.health = health;    }    public boolean isRemovable() {        return removable;    }    public void setRemovable(boolean removable) {        this.removable = removable;    }    public void move(long elapsedTime) {        if( !canMove)            return;        x += dx * elapsedTime / 1000000000.0;        y += dy * elapsedTime / 1000000000.0;        r += dr;    }    public boolean isAlive() {        return Double.compare(health, 0) > 0;    }    public ImageView getView() {        return imageView;    }    public void updateUI() {        imageView.relocate(x, y);        imageView.setRotate(r);    }    public double getWidth() {        return w;    }    public double getHeight() {        return h;    }    public double getCenterX() {        return x + w * 0.5;    }    public double getCenterY() {        return y + h * 0.5;    }    // TODO: per-pixel-collision    public boolean collidesWith( SpriteBase otherSprite) {        return ( otherSprite.x + otherSprite.w >= x && otherSprite.y + otherSprite.h >= y && otherSprite.x <= x + w && otherSprite.y <= y + h);    }    /**     * Reduce health by the amount of damage that the given sprite can inflict     * @param sprite     */    public void getDamagedBy( SpriteBase sprite) {        health -= sprite.getDamage();    }    /**     * Set health to 0     */    public void kill() {        setHealth( 0);    }    /**     * Set flag that the sprite can be removed from the UI.     */    public void remove() {        setRemovable(true);    }    /**     * Set flag that the sprite can't move anymore.     */    public void stopMovement() {        this.canMove = false;    }    public abstract void checkRemovability();}